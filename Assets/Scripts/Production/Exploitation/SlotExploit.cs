using System.Collections;
using System.Collections.Generic;
using UnityEditor.Experimental;
using UnityEngine;
using UnityEngine.UI;

public class SlotExploit : MonoBehaviour
{
    public Exploitation exploitation;
    public Pop pop;
    Demographie demo;
    [SerializeField] private GameObject boutonBonusOutil;
    [SerializeField] private Sprite spriteBonusOutilActive;
    [SerializeField] private Image iconePop;
    private Sprite spriteBonusOutilDefaut;

    public bool estExpoite
    {
        get
        {
            if (pop == null)
            {
                return false;
            }
            else return true;
        }
    }

    // Start is called before the first frame update
    void Start()
    {
        InterfaceRessource.Actuel.EventInterfaceMAJ.AddListener(MAJBoutonBonusOutil);
        demo = exploitation.expedition.tribu.demographie;

        boutonBonusOutil.SetActive(false);
        iconePop.gameObject.SetActive(false);

        spriteBonusOutilDefaut = boutonBonusOutil.GetComponent<Image>().sprite;

        MiseAJourIconePop();
    }


    private void MiseAJourIconePop()
    {
        if (iconePop.sprite != ListeIcones.Defaut.iconePopulation)
        {
            iconePop.sprite = ListeIcones.Defaut.iconePopulation;
        }
    }
    public void CliquerSurSlot()
    {
        if (pop)
        {
            pop.gameObject.SetActive(true);
            demo.AjouterPop(pop);
            pop = null;
            iconePop.gameObject.SetActive(false);
            boutonBonusOutil.SetActive(false);

            if(bonusOutil)
            {
                bonusOutil = false;
                boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilDefaut;
            }
        }
        else if (demo.listePopsCampement.Count > 0)
        {
            pop = demo.RetirerPop(false);
            pop.gameObject.SetActive(false);
            iconePop.gameObject.SetActive(true);
            boutonBonusOutil.SetActive(true);
        }

        exploitation.AfficherGainRessource();
    }

    private bool yASuffisammentOutil
    {
        get
        {
            if (ListeRessources.Defaut && (exploitation.expedition.tribu.stockRessources.RessourcesEnStock.gains[ListeRessources.Defaut.TrouverIndexRessource("Outil")] > 0
                || exploitation.expedition.tribu.stockRessources.ProjectionGain.gains[ListeRessources.Defaut.TrouverIndexRessource("Outil")] > 0))
            {
                return true;
            }
        
            else return false;
        }
    }

    [HideInInspector]public bool bonusOutil;
    public void CliquerSurBoutonOutil()
    {
        bonusOutil = !bonusOutil;
        if(bonusOutil && yASuffisammentOutil)
        {
            boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilActive;
        }
        else if(!bonusOutil)
        {
            boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilDefaut;
        }
        exploitation.AfficherGainRessource();
    }

    private void MAJBoutonBonusOutil()
    {
        StockRessource stock = exploitation.expedition.tribu.stockRessources;

        if (yASuffisammentOutil || bonusOutil)
        {
            boutonBonusOutil.GetComponent<Button>().interactable = true;
        }
        else
        {
            boutonBonusOutil.GetComponent<Button>().interactable = false;
        }

        if(ListeRessources.Defaut && bonusOutil && (stock.ProjectionGain.gains[ListeRessources.Defaut.TrouverIndexRessource("Outil")] < 0
            || stock.RessourcesEnStock.gains[ListeRessources.Defaut.TrouverIndexRessource("Outil")] < 0))
        {
            CliquerSurBoutonOutil();
            boutonBonusOutil.GetComponent<Button>().interactable = false;
        }
    }

    public void RecentrerPop()
    {
        if(pop)
        {
            Vector3 position = transform.position;
            position.z = exploitation.expedition.tribu.transform.position.z;
            pop.transform.position = position;
        }
    }

    private void OnDestroy()
    {
        if(pop)
        {
            demo.AjouterPop(pop);
        }   
    }
}
