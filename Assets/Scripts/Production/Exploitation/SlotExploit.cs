using System.Collections;
using System.Collections.Generic;
using UnityEditor.Experimental;
using UnityEngine;
using UnityEngine.UI;

public class SlotExploit : Slot
{
    public Exploitation exploitation;

    [SerializeField] private Button boutonBonusOutil;
    private InfoBulle infobulleBoutonOutil;
    [SerializeField] private Sprite spriteBonusOutilActive;
    private Sprite spriteBonusOutilDefaut;


    // Start is called before the first frame update
    void Start()
    {
        InterfaceRessource.Actuel.EventInterfaceMAJ.AddListener(MAJBoutonBonusOutil);
        demo = exploitation.expedition.tribu.demographie;

        boutonBonusOutil.gameObject.SetActive(false);

        spriteBonusOutilDefaut = boutonBonusOutil.GetComponent<Image>().sprite;

        infobulleBoutonOutil = boutonBonusOutil.GetComponent<InfoBulle>();
    }

    public override void CliquerSurSlot()
    {
        base.CliquerSurSlot();
        exploitation.AfficherGainRessource();
    }

    protected override void retirerPop()
    {
        base.retirerPop();

        boutonBonusOutil.gameObject.SetActive(false);
        infobulle.texteInfoBulle = "Cliquez Assigner une population à l'exploitation de cette tuile";

        if (bonusOutil)
        {
            bonusOutil = false;
            boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilDefaut;
        }
    }

    protected override void AssignerPop()
    {
        base.AssignerPop();
        boutonBonusOutil.gameObject.SetActive(true);
        infobulle.texteInfoBulle = "Cliquez pour renvoyer la population au campement";
    }

    private bool yASuffisammentOutil
    {
        get
        {
            StockRessource stock = exploitation.expedition.tribu.stockRessources;

            if (bonusOutil)
            {
                if (stock.RessourcesEnStock.RecupuererGainRessource("Outil") 
                    + stock.ProjectionGain.RecupuererGainRessource("Outil") >= 0)
                    return true;
            }
            else
            {
                if (stock.RessourcesEnStock.RecupuererGainRessource("Outil")
                    + stock.ProjectionGain.RecupuererGainRessource("Outil") >= 1)
                    return true;
            }
            return false;
        }
    }

    [HideInInspector]public bool bonusOutil;

    public void CliquerSurBoutonOutil()
    {
        bonusOutil = !bonusOutil;
        if(bonusOutil && yASuffisammentOutil)
        {
            boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilActive;
        }
        else if(!bonusOutil)
        {
            boutonBonusOutil.GetComponent<Image>().sprite = spriteBonusOutilDefaut;
        }
        exploitation.AfficherGainRessource();
    }

    private void MAJBoutonBonusOutil()
    {
        StockRessource stock = exploitation.expedition.tribu.stockRessources;

        if (yASuffisammentOutil || bonusOutil)
        {
            boutonBonusOutil.interactable = true;
            
        }
        else
        {
            boutonBonusOutil.interactable = false;
        }

        if(bonusOutil && !yASuffisammentOutil)
        {
            CliquerSurBoutonOutil();
            boutonBonusOutil.interactable = false;
        }

        MAJInfobullBoutonOutil();
    }

    private void MAJInfobullBoutonOutil()
    {
        StockRessource stock = exploitation.expedition.tribu.stockRessources;
        string retour;

        if (bonusOutil)
            retour = "Cliquez pour desactiver le bonus d'outil";
        else
        {
            retour = "Cliquez pour activer le bonus d'outil";

            retour += "\n<color=#" + ColorUtility.ToHtmlStringRGBA(ListeCouleurs.Defaut.couleurAlerteTexteInterface)
                    + ">-1 <color=\"white\">Outil";

            if (!yASuffisammentOutil)
                retour += "<color=#" + ColorUtility.ToHtmlStringRGBA(ListeCouleurs.Defaut.couleurAlerteTexteInterface) +
                    "> (insufisant)";
        }

        infobulleBoutonOutil.texteInfoBulle = retour;
    }
}
