using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Exploitation : MonoBehaviour
{
    public Expedition expedition;
    [SerializeField] private GameObject slot;
    private TuileManager tuileExploitee;
    private float profondeur = -3.9f;
    public List<SlotExploit> listeSlots = new List<SlotExploit>();
    [SerializeField] private GameObject panelGainRessource;
    [SerializeField] private GameObject panelGainXP;

    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    private void OnEnable()
    {
        MisaAJourSlots();
    }

    private void MisaAJourSlots()
    {
        if(tuileExploitee)
        {
            if (tuileExploitee.productionTuile.nbrSlot != listeSlots.Count)
            {
                GenererSlots(tuileExploitee.productionTuile.nbrSlot - listeSlots.Count);
            }
        }
    }

    //Fait office d'initialisateur
    public TuileManager TuileExploitee
    {
        set
        {
            tuileExploitee = value;
            Vector3 position = tuileExploitee.transform.position;
            position.z = profondeur;
            transform.position = position;
            GenererSlots();

        }
    }

    private void GenererSlots()
    {
        if (expedition.tribu.tuileActuelle != tuileExploitee)
        {
            int nbrSlots = tuileExploitee.productionTuile.nbrSlot;
            for (int i = 0; i < nbrSlots; i++)
            {
                GameObject nvSlot = Instantiate(slot, transform);
                SlotExploit slotExploit = nvSlot.GetComponent<SlotExploit>();
                listeSlots.Add(slotExploit);
                slotExploit.exploitation = this;
            }
            RearangerSlots();
        }
    }

    private void GenererSlots(int nbrSlots)
    {
        if (expedition.tribu.tuileActuelle != tuileExploitee)
        {
            if (nbrSlots > 0) //si le nobre de slots à rajouter est positif, on instantie ces slots
            {
                for (int i = 0; i < nbrSlots; i++)
                {
                    GameObject nvSlot = Instantiate(slot, transform);
                    SlotExploit slotExploit = nvSlot.GetComponent<SlotExploit>();
                    listeSlots.Add(slotExploit);
                    slotExploit.exploitation = this;
                }
            }
            else //sinon on supprime des slots
            {
                for (int i = 0; i < Math.Abs(nbrSlots); i++)
                {
                    Destroy(listeSlots[listeSlots.Count - 1].gameObject);
                    listeSlots.RemoveAt(listeSlots.Count - 1);
                }
            }
            RearangerSlots();
        }
    }

    private void RearangerSlots()
    {
        int nbrSlots = listeSlots.Count;
        float largeurSlot = slot.GetComponent<SpriteRenderer>().bounds.size.x;
        float espaceSepration = 0.025f;
        int degreAxeY = nbrSlots / 3;

        int colonnes = (nbrSlots - 1) % 3;
        if (nbrSlots > 3) colonnes = 2;

        float positionX = (largeurSlot / 2 * colonnes) + (espaceSepration * colonnes);
        float positionY = (largeurSlot * (degreAxeY)) - (espaceSepration * degreAxeY);

        Vector3 decalage = new Vector3();

        for (int i = 0; i < nbrSlots; i++)
        {
            SlotExploit slotExploit = listeSlots[i];

            decalage.x = -largeurSlot * (i % 3) - espaceSepration * (i % 3) + positionX;
            decalage.y = -largeurSlot * (i / 3) - espaceSepration * (i / 3) + positionY;

            slotExploit.transform.position += decalage;
        }

        foreach(SlotExploit slot in listeSlots)
        {
            if(slot.pop != null)
            {
                slot.RecentrerPop();
            }
        }
    }

    public void AfficherGainRessource()
    {
        panelGainRessource.GetComponent<PanelGainRessources>().AfficherRessources(GainRessource);
    }

    private Production GainRessource
    {
        get
        {
            if (tuileExploitee != expedition.tribu.tuileActuelle)
            {
                int slotsOccupes = 0;
                foreach (SlotExploit slot in listeSlots)
                {
                    if (slot.pop != null)
                    {
                        slotsOccupes++;
                    }
                }
                return tuileExploitee.productionTuile.production * slotsOccupes;
            }
            else
            {
                return tuileExploitee.productionTuile.production;
            }
        }
    }
}
