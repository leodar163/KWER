using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Exploitation : MonoBehaviour
{
    public Expedition expedition;
    [SerializeField] private GameObject slot;
    private TuileManager tuileExploitee;
    public List<SlotExploit> listeSlots = new List<SlotExploit>();
    [SerializeField] private PanelGainRessources panelGainRessource;
    private Production gainRessource;
    [SerializeField] private GameObject zoneSlots;

    // Start is called before the first frame update
    void Start()
    {
        TourParTour.Defaut.eventNouveauTour.AddListener(MiseAJourProduction);
        slot.SetActive(false);
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    private void OnEnable()
    {
        MiseAJourSlots();
    }

    private void OnDestroy()
    {
        if(tuileExploitee)
        {
            expedition.tribu.stockRessources.RetirerGain(GainRessource);
        }
    }

    private void MiseAJourProduction()
    {
        MiseAJourSlots();
        expedition.tribu.stockRessources.AjouterGain(GainRessource);
    }

    private void MiseAJourSlots()
    {
        if(tuileExploitee)
        {
            if (tuileExploitee.productionTuile.nbrSlot != listeSlots.Count)
            {
                GenererSlots(tuileExploitee.productionTuile.nbrSlot - listeSlots.Count);
            }
        }
    }

    //Fait office d'initialisateur
    public TuileManager TuileExploitee
    {
        set
        {
            tuileExploitee = value;
            Vector3 position = tuileExploitee.transform.position;
            position.z = transform.position.z;
            transform.position = position;
            expedition.tribu.stockRessources.AjouterGain(GainRessource);
            GenererSlots();

        }
    }

    private void GenererSlots()
    {
        if (expedition.tribu.tuileActuelle != tuileExploitee)
        {
            int nbrSlots = tuileExploitee.productionTuile.nbrSlot;
            for (int i = 0; i < nbrSlots; i++)
            {
                GameObject nvSlot = Instantiate(slot, zoneSlots.transform);
                SlotExploit slotExploit = nvSlot.GetComponent<SlotExploit>();
                listeSlots.Add(slotExploit);
                slotExploit.exploitation = this;
            }
            //RearangerSlots();
        }
    }

    private void GenererSlots(int nbrSlots)
    {
        if (expedition.tribu.tuileActuelle != tuileExploitee)
        {
            if (nbrSlots > 0) //si le nobre de slots à rajouter est positif, on instantie ces slots
            {
                for (int i = 0; i < nbrSlots; i++)
                {
                    GameObject nvSlot = Instantiate(slot, zoneSlots.transform);
                    SlotExploit slotExploit = nvSlot.GetComponent<SlotExploit>();
                    listeSlots.Add(slotExploit);
                    slotExploit.exploitation = this;
                }
            }
            else //sinon on supprime des slots
            {
                for (int i = 0; i < Math.Abs(nbrSlots); i++)
                {
                    if(listeSlots.Count > 1)
                    {
                        Destroy(listeSlots[listeSlots.Count - 1].gameObject);
                        listeSlots.RemoveAt(listeSlots.Count - 1);
                    }
                    else
                    {
                        Destroy(listeSlots[0].gameObject);
                        listeSlots.RemoveAt(0);
                    }
                }
            }
        }
    }

    public void AfficherGainRessource()
    {
        panelGainRessource.AfficherRessources(GainRessource);
        expedition.tribu.stockRessources.AjouterGain(GainRessource);
    }

    private Production GainRessource
    {
        get
        {
            if(gainRessource == null)
            {
                gainRessource = ScriptableObject.CreateInstance<Production>();
                gainRessource.gains = new float[ListeRessources.Defaut.listeDesRessources.Length];
            }
            gainRessource.Clear();
            if (tuileExploitee != expedition.tribu.tuileActuelle)
            {
                int slotsOccupes = 0;
                int slotsBonusOutil = 0;
                foreach (SlotExploit slot in listeSlots)
                {
                    if (slot.pop != null)
                    {
                        slotsOccupes++;
                    }
                }
                foreach (SlotExploit slot in listeSlots)
                {
                    if (slot.bonusOutil)
                    {
                        slotsBonusOutil++;
                    }
                }
                for (int i = 0; i < gainRessource.gains.Length; i++)
                {
                    gainRessource.gains[i] += tuileExploitee.productionTuile.Production.gains[i] * slotsOccupes;
                    gainRessource.gains[i] += tuileExploitee.productionTuile.BonusOutil.gains[i] * slotsBonusOutil;
                }
                if (ListeRessources.Defaut) gainRessource.gains[ListeRessources.Defaut.TrouverIndexRessource("Outil")] -= slotsBonusOutil;
                return gainRessource;
            }
            else
            {
                for (int i = 0; i < gainRessource.gains.Length; i++)
                {
                    gainRessource.gains[i] += tuileExploitee.productionTuile.Production.gains[i];
                }
                return gainRessource;
            }
        }
    }
}
